// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: kruise_game_api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameServerServiceClient is the client API for GameServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServerServiceClient interface {
	GetGameServers(ctx context.Context, in *GetGameServersRequest, opts ...grpc.CallOption) (*GetGameServersResponse, error)
	UpdateGameServers(ctx context.Context, in *UpdateGameServersRequest, opts ...grpc.CallOption) (*UpdateGameServersResponse, error)
	DeleteGameServers(ctx context.Context, in *DeleteGameServersRequest, opts ...grpc.CallOption) (*DeleteGameServersResponse, error)
}

type gameServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServerServiceClient(cc grpc.ClientConnInterface) GameServerServiceClient {
	return &gameServerServiceClient{cc}
}

func (c *gameServerServiceClient) GetGameServers(ctx context.Context, in *GetGameServersRequest, opts ...grpc.CallOption) (*GetGameServersResponse, error) {
	out := new(GetGameServersResponse)
	err := c.cc.Invoke(ctx, "/kruisegameapi.GameServerService/GetGameServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerServiceClient) UpdateGameServers(ctx context.Context, in *UpdateGameServersRequest, opts ...grpc.CallOption) (*UpdateGameServersResponse, error) {
	out := new(UpdateGameServersResponse)
	err := c.cc.Invoke(ctx, "/kruisegameapi.GameServerService/UpdateGameServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerServiceClient) DeleteGameServers(ctx context.Context, in *DeleteGameServersRequest, opts ...grpc.CallOption) (*DeleteGameServersResponse, error) {
	out := new(DeleteGameServersResponse)
	err := c.cc.Invoke(ctx, "/kruisegameapi.GameServerService/DeleteGameServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServerServiceServer is the server API for GameServerService service.
// All implementations must embed UnimplementedGameServerServiceServer
// for forward compatibility
type GameServerServiceServer interface {
	GetGameServers(context.Context, *GetGameServersRequest) (*GetGameServersResponse, error)
	UpdateGameServers(context.Context, *UpdateGameServersRequest) (*UpdateGameServersResponse, error)
	DeleteGameServers(context.Context, *DeleteGameServersRequest) (*DeleteGameServersResponse, error)
	mustEmbedUnimplementedGameServerServiceServer()
}

// UnimplementedGameServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServerServiceServer struct {
}

func (UnimplementedGameServerServiceServer) GetGameServers(context.Context, *GetGameServersRequest) (*GetGameServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameServers not implemented")
}
func (UnimplementedGameServerServiceServer) UpdateGameServers(context.Context, *UpdateGameServersRequest) (*UpdateGameServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameServers not implemented")
}
func (UnimplementedGameServerServiceServer) DeleteGameServers(context.Context, *DeleteGameServersRequest) (*DeleteGameServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGameServers not implemented")
}
func (UnimplementedGameServerServiceServer) mustEmbedUnimplementedGameServerServiceServer() {}

// UnsafeGameServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServerServiceServer will
// result in compilation errors.
type UnsafeGameServerServiceServer interface {
	mustEmbedUnimplementedGameServerServiceServer()
}

func RegisterGameServerServiceServer(s grpc.ServiceRegistrar, srv GameServerServiceServer) {
	s.RegisterService(&GameServerService_ServiceDesc, srv)
}

func _GameServerService_GetGameServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServiceServer).GetGameServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kruisegameapi.GameServerService/GetGameServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServiceServer).GetGameServers(ctx, req.(*GetGameServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerService_UpdateGameServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServiceServer).UpdateGameServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kruisegameapi.GameServerService/UpdateGameServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServiceServer).UpdateGameServers(ctx, req.(*UpdateGameServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerService_DeleteGameServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGameServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServiceServer).DeleteGameServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kruisegameapi.GameServerService/DeleteGameServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServiceServer).DeleteGameServers(ctx, req.(*DeleteGameServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameServerService_ServiceDesc is the grpc.ServiceDesc for GameServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kruisegameapi.GameServerService",
	HandlerType: (*GameServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGameServers",
			Handler:    _GameServerService_GetGameServers_Handler,
		},
		{
			MethodName: "UpdateGameServers",
			Handler:    _GameServerService_UpdateGameServers_Handler,
		},
		{
			MethodName: "DeleteGameServers",
			Handler:    _GameServerService_DeleteGameServers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kruise_game_api.proto",
}

// GameServerSetServiceClient is the client API for GameServerSetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServerSetServiceClient interface {
	GetGameServerSets(ctx context.Context, in *GetGameServerSetsRequest, opts ...grpc.CallOption) (*GetGameServerSetsResponse, error)
	UpdateGameServerSets(ctx context.Context, in *UpdateGameServerSetsRequest, opts ...grpc.CallOption) (*UpdateGameServerSetsResponse, error)
	DeleteGameServerSets(ctx context.Context, in *DeleteGameServerSetsRequest, opts ...grpc.CallOption) (*DeleteGameServerSetsResponse, error)
}

type gameServerSetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServerSetServiceClient(cc grpc.ClientConnInterface) GameServerSetServiceClient {
	return &gameServerSetServiceClient{cc}
}

func (c *gameServerSetServiceClient) GetGameServerSets(ctx context.Context, in *GetGameServerSetsRequest, opts ...grpc.CallOption) (*GetGameServerSetsResponse, error) {
	out := new(GetGameServerSetsResponse)
	err := c.cc.Invoke(ctx, "/kruisegameapi.GameServerSetService/GetGameServerSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerSetServiceClient) UpdateGameServerSets(ctx context.Context, in *UpdateGameServerSetsRequest, opts ...grpc.CallOption) (*UpdateGameServerSetsResponse, error) {
	out := new(UpdateGameServerSetsResponse)
	err := c.cc.Invoke(ctx, "/kruisegameapi.GameServerSetService/UpdateGameServerSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerSetServiceClient) DeleteGameServerSets(ctx context.Context, in *DeleteGameServerSetsRequest, opts ...grpc.CallOption) (*DeleteGameServerSetsResponse, error) {
	out := new(DeleteGameServerSetsResponse)
	err := c.cc.Invoke(ctx, "/kruisegameapi.GameServerSetService/DeleteGameServerSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServerSetServiceServer is the server API for GameServerSetService service.
// All implementations must embed UnimplementedGameServerSetServiceServer
// for forward compatibility
type GameServerSetServiceServer interface {
	GetGameServerSets(context.Context, *GetGameServerSetsRequest) (*GetGameServerSetsResponse, error)
	UpdateGameServerSets(context.Context, *UpdateGameServerSetsRequest) (*UpdateGameServerSetsResponse, error)
	DeleteGameServerSets(context.Context, *DeleteGameServerSetsRequest) (*DeleteGameServerSetsResponse, error)
	mustEmbedUnimplementedGameServerSetServiceServer()
}

// UnimplementedGameServerSetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServerSetServiceServer struct {
}

func (UnimplementedGameServerSetServiceServer) GetGameServerSets(context.Context, *GetGameServerSetsRequest) (*GetGameServerSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameServerSets not implemented")
}
func (UnimplementedGameServerSetServiceServer) UpdateGameServerSets(context.Context, *UpdateGameServerSetsRequest) (*UpdateGameServerSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameServerSets not implemented")
}
func (UnimplementedGameServerSetServiceServer) DeleteGameServerSets(context.Context, *DeleteGameServerSetsRequest) (*DeleteGameServerSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGameServerSets not implemented")
}
func (UnimplementedGameServerSetServiceServer) mustEmbedUnimplementedGameServerSetServiceServer() {}

// UnsafeGameServerSetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServerSetServiceServer will
// result in compilation errors.
type UnsafeGameServerSetServiceServer interface {
	mustEmbedUnimplementedGameServerSetServiceServer()
}

func RegisterGameServerSetServiceServer(s grpc.ServiceRegistrar, srv GameServerSetServiceServer) {
	s.RegisterService(&GameServerSetService_ServiceDesc, srv)
}

func _GameServerSetService_GetGameServerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameServerSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerSetServiceServer).GetGameServerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kruisegameapi.GameServerSetService/GetGameServerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerSetServiceServer).GetGameServerSets(ctx, req.(*GetGameServerSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerSetService_UpdateGameServerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameServerSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerSetServiceServer).UpdateGameServerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kruisegameapi.GameServerSetService/UpdateGameServerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerSetServiceServer).UpdateGameServerSets(ctx, req.(*UpdateGameServerSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerSetService_DeleteGameServerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGameServerSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerSetServiceServer).DeleteGameServerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kruisegameapi.GameServerSetService/DeleteGameServerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerSetServiceServer).DeleteGameServerSets(ctx, req.(*DeleteGameServerSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameServerSetService_ServiceDesc is the grpc.ServiceDesc for GameServerSetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameServerSetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kruisegameapi.GameServerSetService",
	HandlerType: (*GameServerSetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGameServerSets",
			Handler:    _GameServerSetService_GetGameServerSets_Handler,
		},
		{
			MethodName: "UpdateGameServerSets",
			Handler:    _GameServerSetService_UpdateGameServerSets_Handler,
		},
		{
			MethodName: "DeleteGameServerSets",
			Handler:    _GameServerSetService_DeleteGameServerSets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kruise_game_api.proto",
}
